package com.ebeijia.service.wechat.core;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.ebeijia.entity.vo.wechat.resp.Article;
import com.ebeijia.entity.vo.wechat.resp.Image;
import com.ebeijia.entity.vo.wechat.resp.ImageMessage;
import com.ebeijia.entity.vo.wechat.resp.Music;
import com.ebeijia.entity.vo.wechat.resp.MusicMessage;
import com.ebeijia.entity.vo.wechat.resp.NewsMessage;
import com.ebeijia.entity.vo.wechat.resp.TextMessage;
import com.ebeijia.entity.vo.wechat.resp.Video;
import com.ebeijia.entity.vo.wechat.resp.VideoMessage;
import com.ebeijia.entity.vo.wechat.resp.Voice;
import com.ebeijia.entity.vo.wechat.resp.VoiceMessage;
import com.ebeijia.entity.wechat.TblArticlesInf;
import com.ebeijia.entity.wechat.TblWechatReqMsg;
import com.ebeijia.entity.wechat.TblWechatRespMsg;
import com.ebeijia.service.wechat.media.ArticlesService;
import com.ebeijia.service.wechat.msg.WechatReqMsgService;
import com.ebeijia.service.wechat.msg.WechatRespMsgService;
import com.ebeijia.service.wechat.subscribe.WechatSubscribeService;
import com.ebeijia.util.wechat.MessageUtil;

/**
 * 核心服务类
 * 
 * @author zhicheng.xu
 * @date 2015-04-15
 */
@Component
public class CoreService {
	/**
	 * 处理微信发来的请求
	 * 
	 * @param request
	 * @return
	 */
	private static Logger logger = LoggerFactory.getLogger(CoreService.class);	
	@Autowired
	private WechatSubscribeService wechatSubscribeService;
	@Autowired
	private WechatReqMsgService wechatReqMsgService;
	@Autowired
	private WechatRespMsgService wechatRespMsgService;
	@Autowired
	private WechatMchtInfService wechatMchtInfService;
	@Autowired
	private ArticlesService articlesService;
	
	@Transactional
	public String processRequest(HttpServletRequest request,String mchtId) {
		String respMessage = null;
		try {
			// xml请求解析
			Map<String, String> requestMap = MessageUtil.parseXml(request);

			// 发送方帐号（open_id）
			String fromUsrName = requestMap.get("FromUserName");
			// 公众帐号
			String toUsrName = requestMap.get("ToUserName");
			//发送时间
			String createTime = requestMap.get("CreateTime");
			// 消息类型
			String msgType = requestMap.get("MsgType");

//			//收到消息先验证msgId是否重复,重复则不保存数据
//			TblWechatReqMsg data =wechatReqMsgService.findByMsgId(msgId);
			//保存消息实体
			TblWechatReqMsg tblWechatReqMsg = new TblWechatReqMsg();
			tblWechatReqMsg.setFromUsrName(fromUsrName);
			tblWechatReqMsg.setToUsrName(toUsrName);
			tblWechatReqMsg.setCreateTime(createTime);
			tblWechatReqMsg.setMsgType(msgType);
			tblWechatReqMsg.setMchtId(mchtId);
			String content = requestMap.get("Content");;
			//根据接收的消息类型入库
			this.saveReqMsg(tblWechatReqMsg,requestMap);
			
			//如果是事件类型则重新赋值
			if (msgType.equals(MessageUtil.REQ_MESSAGE_TYPE_EVENT)) {
				msgType = requestMap.get("Event");
				//如果是群发消息回执则记录群发消息
				if(msgType.equals(MessageUtil.EVENT_TYPE_MASSSENDJOBFINISH)){
					////////////////////////
				}
			}
			
			logger.info("=msgType:"+msgType+"content:"+content);
			//回复用户消息
			List<TblWechatRespMsg> findByMchtType = 
					wechatRespMsgService.findByMchtType(mchtId,msgType,content);
			logger.info("findByMchtType:"+findByMchtType);
			//如果没有匹配 则回复默认消息
			if(findByMchtType.isEmpty()){
				TextMessage textMessage = new TextMessage();
				textMessage.setToUserName(fromUsrName);
				textMessage.setFromUserName(toUsrName);
				textMessage.setCreateTime(new Date().getTime());
				textMessage.setMsgType(MessageUtil.RESP_MESSAGE_TYPE_TEXT);
				textMessage.setFuncFlag(0);
				textMessage.setContent("欢迎来到我的世界");
				respMessage = MessageUtil.textMessageToXml(textMessage);
			}else{
				//根据系统配置回复指定内容
				TblWechatRespMsg data =findByMchtType.get(0);
				if(MessageUtil.RESP_MESSAGE_TYPE_TEXT.equals(data.getMsgType())){
					logger.info(data.getMsgType());
					TextMessage textMessage = new TextMessage();
					textMessage.setToUserName(fromUsrName);
					textMessage.setFromUserName(toUsrName);
					textMessage.setCreateTime(new Date().getTime());
					textMessage.setMsgType(MessageUtil.RESP_MESSAGE_TYPE_TEXT);
					textMessage.setFuncFlag(0);
					textMessage.setContent(data.getContent());
					respMessage = MessageUtil.textMessageToXml(textMessage);
				}else if(MessageUtil.RESP_MESSAGE_KF.equals(data.getMsgType())){
					//接入客服
					logger.info(data.getMsgType());
					TextMessage textMessage = new TextMessage();
					textMessage.setToUserName(fromUsrName);
					textMessage.setFromUserName(toUsrName);
					textMessage.setCreateTime(new Date().getTime());
					textMessage.setMsgType(MessageUtil.RESP_MESSAGE_KF);
					respMessage = MessageUtil.textMessageToXml(textMessage);
				}else if(MessageUtil.RESP_MESSAGE_TYPE_IMAGE.equals(data.getMsgType())){
					logger.info(data.getMsgType());
					ImageMessage imageMessage = new ImageMessage();
					imageMessage.setToUserName(fromUsrName);
					imageMessage.setFromUserName(toUsrName);
					imageMessage.setCreateTime(new Date().getTime());
					imageMessage.setMsgType(MessageUtil.RESP_MESSAGE_TYPE_IMAGE);
					imageMessage.setFuncFlag(0);
					Image image = new Image();
					image.setMediaId(data.getMediaId());
					imageMessage.setImage(image);
					respMessage = MessageUtil.imageMessageToXml(imageMessage);
					logger.info(respMessage);
				}else if(MessageUtil.RESP_MESSAGE_TYPE_VOICE.equals(data.getMsgType())){
					logger.info(data.getMsgType());
					VoiceMessage voiceMessage = new VoiceMessage();
					voiceMessage.setToUserName(fromUsrName);
					voiceMessage.setFromUserName(toUsrName);
					voiceMessage.setCreateTime(new Date().getTime());
					voiceMessage.setMsgType(MessageUtil.RESP_MESSAGE_TYPE_VOICE);
					voiceMessage.setFuncFlag(0);
					Voice voice = new Voice();
					voice.setMediaId(data.getMediaId());
					voiceMessage.setVoice(voice);
					respMessage = MessageUtil.voiceMessageToXml(voiceMessage);
					logger.info(respMessage);
				}else if(MessageUtil.RESP_MESSAGE_TYPE_VIDEO.equals(data.getMsgType())){
					logger.info(data.getMsgType());
					VideoMessage videoMessage = new VideoMessage();
					videoMessage.setToUserName(fromUsrName);
					videoMessage.setFromUserName(toUsrName);
					videoMessage.setCreateTime(new Date().getTime());
					videoMessage.setMsgType(MessageUtil.RESP_MESSAGE_TYPE_VIDEO);
					videoMessage.setFuncFlag(0);
					Video video = new Video();
					video.setMediaId(data.getMediaId());
					video.setTitle(data.getTitle());
					video.setDescription(data.getDescription());
					videoMessage.setVideo(video);
					respMessage = MessageUtil.videoMessageToXml(videoMessage);
					logger.info(respMessage);
				}else if(MessageUtil.RESP_MESSAGE_TYPE_MUSIC.equals(data.getMsgType())){
					logger.info(data.getMsgType());
					logger.info("=================================");
					MusicMessage musicMessage = new MusicMessage();
					musicMessage.setToUserName(fromUsrName);
					musicMessage.setFromUserName(toUsrName);
					musicMessage.setCreateTime(new Date().getTime());
					musicMessage.setMsgType(MessageUtil.RESP_MESSAGE_TYPE_MUSIC);
					musicMessage.setFuncFlag(0);
					Music music = new Music();
					music.setTitle(data.getTitle());
					music.setDescription(data.getDescription());
					music.setMusicUrl(data.getMusicUrl());
					music.setHQMusicUrl(data.getHqMusicUrl());
					music.setThumbMediaId(data.getMediaId());
					musicMessage.setMusic(music);
					logger.info(music.getMusicUrl()+"-"+musicMessage.getToUsrName());
					respMessage = MessageUtil.musicMessageToXml(musicMessage);
					logger.info(respMessage);
				}else if(MessageUtil.RESP_MESSAGE_TYPE_NEWS.equals(data.getMsgType())){
					logger.info(data.getMsgType());
					List<Article> articleList = new ArrayList<Article>();
					for(String articleId :data.getArticleIds().split(",")){
						TblArticlesInf articlesTmp =articlesService.getById(articleId);
						if(articlesTmp !=null){
							Article article = new Article();
							article.setTitle(articlesTmp.getTitle());
							article.setDescription(articlesTmp.getDescription());
							article.setPicUrl(articlesTmp.getPicUrl());
							article.setUrl(articlesTmp.getUrl());
							articleList.add(article);
						}
					}
					NewsMessage newsMessage = new NewsMessage();
					newsMessage.setToUserName(fromUsrName);
					newsMessage.setFromUserName(toUsrName);
					newsMessage.setCreateTime(new Date().getTime());
					newsMessage.setMsgType(MessageUtil.RESP_MESSAGE_TYPE_NEWS);
					newsMessage.setFuncFlag(0);
					newsMessage.setArticleCount(articleList.size());
					newsMessage.setArticles(articleList);
					respMessage = MessageUtil.newsMessageToXml(newsMessage);
					logger.info(respMessage);
				}
			}
		} catch (Exception e) {
			//异常时通知微信不做处理
			respMessage = "";
			e.printStackTrace();
		}
		return respMessage;
	}
	
	
	private void saveReqMsg(TblWechatReqMsg tblWechatReqMsg,Map<String, String> requestMap){
		// 消息类型
		String msgType = requestMap.get("MsgType");
		if (msgType.equals(MessageUtil.REQ_MESSAGE_TYPE_TEXT)) {
			// 接收用户发送的文本消息内容
			String content = requestMap.get("Content");
			String msgId = requestMap.get("MsgId");
			tblWechatReqMsg.setMsgId(msgId);
			tblWechatReqMsg.setContent(content);
		}// 图片消息
		else if (msgType.equals(MessageUtil.REQ_MESSAGE_TYPE_IMAGE)) {
			String picUrl = requestMap.get("PicUrl");
			String mediaId = requestMap.get("MediaId");
			String msgId = requestMap.get("MsgId");
			tblWechatReqMsg.setMsgId(msgId);
			tblWechatReqMsg.setPicUrl(picUrl);
			tblWechatReqMsg.setMediaId(mediaId);
		}
		// 地理位置消息
		else if (msgType.equals(MessageUtil.REQ_MESSAGE_TYPE_LOCATION)) {
			String locationX = requestMap.get("Location_X");
			String locationY = requestMap.get("Location_Y");
			String scale = requestMap.get("Scale");
			String label = requestMap.get("Label");
			String msgId = requestMap.get("MsgId");
			tblWechatReqMsg.setMsgId(msgId);
			tblWechatReqMsg.setLocationX(locationX);
			tblWechatReqMsg.setLocationY(locationY);
			tblWechatReqMsg.setScale(scale);
			tblWechatReqMsg.setLabel(label);
		}
		// 链接消息
		else if (msgType.equals(MessageUtil.REQ_MESSAGE_TYPE_LINK)) {
			String title = requestMap.get("Title");
			String description = requestMap.get("Description");
			String url = requestMap.get("Url");
			String msgId = requestMap.get("MsgId");
			tblWechatReqMsg.setMsgId(msgId);
			tblWechatReqMsg.setTitle(title);
			tblWechatReqMsg.setDescription(description);
			tblWechatReqMsg.setUrl(url);
		}
		// 音频消息
		else if (msgType.equals(MessageUtil.REQ_MESSAGE_TYPE_VOICE)) {
			String mediaId = requestMap.get("MediaId");
			String format = requestMap.get("Format");
			String msgId = requestMap.get("MsgId");
			tblWechatReqMsg.setMsgId(msgId);
			tblWechatReqMsg.setMediaId(mediaId);
			tblWechatReqMsg.setFormat(format);
		}// 事件推送
		else if (msgType.equals(MessageUtil.REQ_MESSAGE_TYPE_EVENT)) {
			// 事件类型
			String eventType = requestMap.get("Event");
			// 订阅
			if (eventType.equals(MessageUtil.EVENT_TYPE_SUBSCRIBE)) {
				tblWechatReqMsg.setEventType(MessageUtil.EVENT_TYPE_SUBSCRIBE);
				String eventKey = requestMap.get("EventKey");
				if(eventKey != null && eventKey.startsWith("qrscene_")){
					tblWechatReqMsg.setEventKey(eventKey);
					tblWechatReqMsg.setTicket(requestMap.get("Ticket"));
				}
			}
			// 取消订阅
			else if (eventType.equals(MessageUtil.EVENT_TYPE_UNSUBSCRIBE)) {
				// 取消订阅后用户再收不到公众号发送的消息，因此不需要回复消息
				tblWechatReqMsg.setEventType(MessageUtil.EVENT_TYPE_UNSUBSCRIBE);
			}
			// 自定义菜单点击事件
			else if (eventType.equals(MessageUtil.EVENT_TYPE_CLICK)) {
				tblWechatReqMsg.setEventType(MessageUtil.EVENT_TYPE_CLICK);
				String eventKey = requestMap.get("EventKey");
				tblWechatReqMsg.setEventKey(eventKey);
				tblWechatReqMsg.setEventType(eventType);
			}
		}
		wechatReqMsgService.save(tblWechatReqMsg);
	}
}
