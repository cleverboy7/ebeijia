package com.ebeijia.controller.action.wechat.usr;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.ebeijia.tools.Validate4J;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.ebeijia.ajax.resp.AjaxResp;
import com.ebeijia.annotation.MyLog;
import com.ebeijia.entity.wechat.TblWechatSubscribe;
import com.ebeijia.service.wechat.subscribe.WechatSubscribeService;
import com.ebeijia.util.Constant;
import com.ebeijia.util.wechat.WechatError;

@Controller
@RequestMapping(value="/wechat/usr")
public class WechatUsrSynAction {
	
	@Autowired
	private WechatSubscribeService wechatSubscribeService;
	
	private static Logger logger = LoggerFactory.getLogger(WechatUsrSynAction.class);
	
	@RequestMapping(value="syn.html",method = RequestMethod.POST)
	@MyLog(remark="微信用户同步")
	@ResponseBody
	public Map<String, Object> syn(HttpSession session,HttpServletRequest request){
		Map<String, Object> map = new HashMap<String, Object>();
		try{
			String respMsg =wechatSubscribeService.synUsr();
			if(respMsg ==null){
				map = AjaxResp.getReturn(Constant.SUCCESS_CODE, "", "");
			}else{
				map = AjaxResp.getReturn(Constant.ERROR_CODE, respMsg, "");
			}
			return map;
		}catch (Exception e) {
			logger.info("微信用户同步失败");
			map = AjaxResp.getReturn(Constant.ERROR_CODE, "微信用户同步失败,请联系管理员或稍后再试", "");
			return map;
		}
	}
	
	@RequestMapping(value="upRemark.html",method = RequestMethod.POST)
	@MyLog(remark="微信用户修改备注")
	@ResponseBody
	public Map<String, Object> upRemark(HttpSession session,HttpServletRequest request){
		String subcribe =request.getParameter("subcribeId");
		String remark =request.getParameter("remark");
		Map<String, Object> map = new HashMap<String, Object>();
		String[][] s = { { subcribe, "1", "20" } ,{ remark, "1", "16" }};
		if (!Validate4J.checkStrArrLen(s)) {
			map = AjaxResp.getReturn(Constant.ERROR_CODE, "参数长度或格式不正确", "");
			return map;
		}
		TblWechatSubscribe data = wechatSubscribeService.getById(subcribe);
		if(data == null){
			map = AjaxResp.getReturn(Constant.ERROR_CODE, "该关注者不存在，请重新选择", "");
			return map;
		}
		data.setRemarks(remark);
		try{
			String respMsg =wechatSubscribeService.upRemark(data);
			if(respMsg ==null){
				map = AjaxResp.getReturn(Constant.SUCCESS_CODE, "", "");
			}else{
				map = AjaxResp.getReturn(Constant.ERROR_CODE, WechatError.checkCode(respMsg), "");
			}
			return map;
		}catch (Exception e) {
			logger.info("微信用户修改备注失败");
			map = AjaxResp.getReturn(Constant.ERROR_CODE, "微信用户修改备注失败,请联系管理员或稍后再试", "");
			return map;
		}
	}
	
	@RequestMapping(value="mv.html",method = RequestMethod.POST)
	@MyLog(remark="微信移动用户分组")
	@ResponseBody
	public Map<String, Object> mv(HttpSession session,HttpServletRequest request){
		String subcribe =request.getParameter("subcribeId");
		String groupId = request.getParameter("groupId");
		Map<String, Object> map = new HashMap<String, Object>();
		String[][] s = { { subcribe, "1", "20" } ,{ groupId, "1", "6" }};
		if (!Validate4J.checkStrArrLen(s)) {
			map = AjaxResp.getReturn(Constant.ERROR_CODE, "参数长度或格式不正确", "");
			return map;
		}
		try{
			TblWechatSubscribe data = wechatSubscribeService.getById(subcribe);
			if(data == null){
				map = AjaxResp.getReturn(Constant.ERROR_CODE, "该关注者不存在，请重新选择", "");
				return map;
			}
			data.setGroupId(groupId);
			String respMsg =wechatSubscribeService.upGroup(data);
			if(respMsg ==null){
				map = AjaxResp.getReturn(Constant.SUCCESS_CODE, "", "");
			}else{
				map = AjaxResp.getReturn(Constant.ERROR_CODE, WechatError.checkCode(respMsg), "");
			}
			return map;
		}catch (Exception e) {
			logger.info("微信移动用户分组失败");
			map = AjaxResp.getReturn(Constant.ERROR_CODE, "微信移动用户分组失败,请联系管理员或稍后再试", "");
			return map;
		}
	}
	
	@RequestMapping(value="batchMv.html",method = RequestMethod.POST)
	@MyLog(remark="微信移动用户分组")
	@ResponseBody
	public Map<String, Object> batchMv(HttpSession session,HttpServletRequest request){
		String openList =request.getParameter("openList");
		String outList = request.getParameter("outList");
		String groupId = request.getParameter("groupId");
		String mchtId = request.getParameter("mchtId");
		Map<String, Object> map = new HashMap<String, Object>();
		String[][] s = { { mchtId, "15", "15" },{ groupId, "1", "6" }};
		if (!Validate4J.checkStrArrLen(s)) {
			map = AjaxResp.getReturn(Constant.ERROR_CODE, "参数长度或格式不正确", "");
			return map;
		}
		try{
			String respMsg=null;
			String respMsg2=null;
			//移动分组
			if(openList != null){
				respMsg =wechatSubscribeService.batchUpGroup(mchtId,openList,groupId);
			}
			//移出分组
			if(outList != null){
				respMsg2 =wechatSubscribeService.batchUpGroup(mchtId,outList,"0");
			}
			if(respMsg ==null && respMsg2==null){
				map = AjaxResp.getReturn(Constant.SUCCESS_CODE, "", "");
			}else{
				if(respMsg == null){
					map = AjaxResp.getReturn(Constant.ERROR_CODE, WechatError.checkCode(respMsg2), "");
				}else{
					map = AjaxResp.getReturn(Constant.ERROR_CODE, WechatError.checkCode(respMsg), "");
				}
			}
			return map;
		}catch (Exception e) {
			logger.info("微信批量移动用户分组失败");
			map = AjaxResp.getReturn(Constant.ERROR_CODE, "微信批量移动用户分组失败,请联系管理员或稍后再试", "");
			return map;
		}
	}
}
