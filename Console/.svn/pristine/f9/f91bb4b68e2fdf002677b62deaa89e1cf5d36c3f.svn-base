package com.ebeijia.controller.action.wechat.media;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import net.sf.json.JSONObject;

import org.ebeijia.tools.Validate4J;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.ebeijia.ajax.resp.AjaxResp;
import com.ebeijia.annotation.MyLog;
import com.ebeijia.service.wechat.media.WechatMediaService;
import com.ebeijia.util.Constant;
import com.ebeijia.util.wechat.WechatError;

@Controller
@RequestMapping(value = "/wechat/media")
public class WechatMediaAddAction {
    @Autowired
    private WechatMediaService wechatMediaService;

    private static Logger logger = LoggerFactory.getLogger(WechatMediaAddAction.class);

    @RequestMapping(value = "upLoad.html", method = RequestMethod.POST)
    @MyLog(remark = "微信上传素材")
    @ResponseBody
    public Map<String, Object> upLoad(HttpSession session, HttpServletRequest request) {
        String mchtId = request.getParameter("mchtId");
        String type = request.getParameter("type");
        String mediaType = request.getParameter("mediaType");
        String name = request.getParameter("name");
        String dsc = request.getParameter("dsc");
        Map<String, Object> map = new HashMap<String, Object>();
        String[][] s = {{mchtId, "15", "15"}, {type, "4", "6"}, {mediaType, "1", "1"}, {name, "1", "30"}, {dsc, "0", "64"}};
        if (!Validate4J.checkStrArrLen(s)) {
            map = AjaxResp.getReturn(Constant.ERROR_CODE, "参数长度或格式不正确", "");
            return map;
        }
        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
        MultipartFile file = multipartRequest.getFile("file");
        if (file == null) {
            map = AjaxResp.getReturn(Constant.ERROR_CODE, "没有找到要上传的文件", "");
            return map;
        }
        String fileName = file.getOriginalFilename();
        // 获取上传文件类型的扩展名,先得到.的位置，再截取从.的下一个位置到文件的最后，最后得到扩展名
        String ext = fileName.substring(fileName.lastIndexOf(".") + 1, fileName.length());
        //验证时统一转成大写
        ext = ext.toLowerCase();
        //验证文件格式是否正确
        String respMsg = this.vali(mediaType, type, ext);
        if (!"".equals(respMsg)) {
            map = AjaxResp.getReturn(Constant.ERROR_CODE, respMsg, "");
            return map;
        }
        try {
            respMsg = wechatMediaService.upLoadMedia(mchtId, type, file, mediaType, ext, name, dsc);
            if (respMsg == null) {
                map = AjaxResp.getReturn(Constant.SUCCESS_CODE, "", "");
            } else {
                map = AjaxResp.getReturn(Constant.ERROR_CODE, WechatError.checkCode(respMsg), "");
            }
            return map;
        } catch (Exception e) {
            logger.info("上传素材失败");
            map = AjaxResp.getReturn(Constant.ERROR_CODE, "上传素材失败,请联系管理员或稍后再试", "");
            return map;
        }
    }

    @RequestMapping(value = "dowLoad.html", method = RequestMethod.POST)
    @MyLog(remark = "微信下载素材")
    @ResponseBody
    public Map<String, Object> dowLoad(HttpSession session, HttpServletRequest request) {
        String mchtId = request.getParameter("mchtId");
        String mediaType = request.getParameter("mediaType");
        String media = request.getParameter("media");
        String resp = null;
        Map<String, Object> map = new HashMap<String, Object>();
        String[][] s = {{mchtId, "15", "15"}, {media, "1", "100"}, {mediaType, "1", "1"}};
        if (!Validate4J.checkStrArrLen(s)) {
            map = AjaxResp.getReturn(Constant.ERROR_CODE, "参数长度或格式不正确", "");
            return map;
        }
        try {
            resp = wechatMediaService.dowLoadMedia(mchtId, media, mediaType);
            //判断是否是下载链接
            if (resp.indexOf("http") == 0) {
                map = AjaxResp.getReturn(Constant.SUCCESS_CODE, "", resp);
            } else {
                JSONObject json = JSONObject.fromObject(resp);
                resp = json.getString("errcode");
                map = AjaxResp.getReturn(Constant.ERROR_CODE, WechatError.checkCode(resp), "");
            }
            return map;
        } catch (Exception e) {
            logger.info("下载多媒体失败");
            map = AjaxResp.getReturn(Constant.ERROR_CODE, "下载多媒体失败,请联系管理员或稍后再试", "");
            return map;
        }
    }

    @RequestMapping(value = "upNews.html", method = RequestMethod.POST)
    @MyLog(remark = "微信上传图文素材")
    @ResponseBody
    public Map<String, Object> upNews(HttpSession session, HttpServletRequest request) {
        String mchtId = request.getParameter("mchtId");
        String articles = request.getParameter("articles");
        String name = request.getParameter("name");
        String dsc = request.getParameter("dsc");
        String respMsg = null;
        Map<String, Object> map = new HashMap<String, Object>();
        String[][] s = {{mchtId, "15", "15"}, {articles, "1", null}, {name, "1", "30"}, {dsc, "0", "64"}};
        if (!Validate4J.checkStrArrLen(s)) {
            map = AjaxResp.getReturn(Constant.ERROR_CODE, "参数长度或格式不正确", "");
            return map;
        }
        try {
            respMsg = wechatMediaService.upGtMedia(mchtId, name, dsc, articles);
            if (respMsg == null) {
                map = AjaxResp.getReturn(Constant.SUCCESS_CODE, "", "");
            } else {
                map = AjaxResp.getReturn(Constant.ERROR_CODE, WechatError.checkCode(respMsg), "");
            }
            return map;
        } catch (Exception e) {
            logger.info("上传图文失败,请联系管理员或稍后再试");
            map = AjaxResp.getReturn(Constant.ERROR_CODE, "上传图文失败,请联系管理员或稍后再试", "");
            return map;
        }
    }

    //验证文件格式
    private String vali(String type, String mediaType, String ext) {
        String respMsg = "";
        if ("0".equals(mediaType)) {
            if ("image".equals(type) || "thumb".equals(type)) {
                if (!"jpg".equals(ext)) {
                    respMsg = "图片或缩略图格式不正确";
                }
            } else if ("voice".equals(type)) {
                if (!"amr".equals(ext) || !"mp3".equals(ext)) {
                    respMsg = "语音格式不正确";
                }
            } else if ("video".equals(type)) {
                if (!"mp4".equals(ext)) {
                    respMsg = "视频格式不正确";
                }
            }
        } else {
            if ("image".equals(type) || "thumb".equals(type)) {
                if (!"jpg".equals(ext) || !"bmp".equals(ext) || !"png".equals(ext) || !"jpeg".equals(ext) || !"gif".equals(ext)) {
                    respMsg = "图片或缩略图格式不正确";
                }
            } else if ("voice".equals(type)) {
                if (!"amr".equals(ext) || !"mp3".equals(ext) || !"wma".equals(ext) || !"wav".equals(ext)) {
                    respMsg = "语音格式不正确";
                }
            } else if ("video".equals(type)) {
                if (!"mp4".equals(ext)) {
                    respMsg = "视频格式不正确";
                }
            }
        }
        return respMsg;
    }
}
