package com.ebeijia.controller.action.admin;


import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.ebeijia.tools.DateTime4J;
import org.ebeijia.tools.Validate4J;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.ebeijia.ajax.resp.AjaxResp;
import com.ebeijia.annotation.MyLog;
import com.ebeijia.entity.TblAdminInf;
import com.ebeijia.service.adminInf.AdminInfService;
import com.ebeijia.util.Constant;
import com.ebeijia.util.EncryptMD5Util;

@Controller
@RequestMapping(value="/wechat/admin")
public class AdminInfAddAction {
	
	@Autowired
	private AdminInfService adminInfService;
	
	private static Logger logger = LoggerFactory.getLogger(AdminInfAddAction.class);
	
	@RequestMapping(value="add.html",method = RequestMethod.POST)
	@MyLog(remark="管理员添加")
	@ResponseBody
	public Map<String, Object> add(HttpSession session,HttpServletRequest request) {
		TblAdminInf tblAdminInf = this.build(request);
		Map<String, Object> map = new HashMap<String, Object>();
		if(tblAdminInf == null){
			map = AjaxResp.getReturn(Constant.ERROR_CODE, "参数长度或格式不正确", "");
			return map;
		}
		MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
		MultipartFile file = multipartRequest.getFile("file");
		String ext =null;
		if(file != null){
			String fileName = file.getOriginalFilename();
			// 获取上传文件类型的扩展名,先得到.的位置，再截取从.的下一个位置到文件的最后，最后得到扩展名
			ext = fileName.substring(fileName.lastIndexOf(".") + 1,fileName.length());
			//验证时统一转成大写
			ext = ext.toLowerCase();
			//验证文件格式是否正确
			String respMsg = this.vali(ext);
			if(!"".equals(respMsg)){
				map = AjaxResp.getReturn(Constant.ERROR_CODE,respMsg, "");
				return map;
			}
		}
		try{
			adminInfService.save(tblAdminInf,"jpg",file,ext);
			map = AjaxResp.getReturn(Constant.SUCCESS_CODE, "", "");
			return map;
		}catch(Exception e){
			logger.info("新增管理员失败");
			map = AjaxResp.getReturn(Constant.ERROR_CODE, "新增管理员失败,请联系管理员或稍后再试", "");
			return map;
		}
	}
	
	
	private TblAdminInf build(HttpServletRequest request){
		String adminName=request.getParameter("adminName");
		String roleId=request.getParameter("roleId");
		String adminPwd=request.getParameter("adminPwd");
		String adminDsc=request.getParameter("adminDsc");
		String[][] s = { { adminName, "4", "32" } ,{ roleId, "1", "6" },{ adminPwd, "6", "32" }
						,{ adminDsc, "0", "128" }};
		if (!Validate4J.checkStrArrLen(s)) {
			return null;
		}
		TblAdminInf tblAdminInf=new TblAdminInf();
		tblAdminInf.setAdminId(adminInfService.getAdminId());
		tblAdminInf.setAdminName(adminName);
		tblAdminInf.setRoleId(roleId);
		tblAdminInf.setAdminStat(Constant.BASE_SUCCESS);
		tblAdminInf.setAdminPwd(EncryptMD5Util.encrypt(adminPwd));
		tblAdminInf.setAdminDsc(adminDsc);
		tblAdminInf.setLastLogTime(" ");
		tblAdminInf.setCrtTime(DateTime4J.getCurrentDateTime());
		return tblAdminInf;
	}
	//验证文件格式
	private String vali(String ext){
		String respMsg="";
		if("jpg".equals(ext) || "png".equals(ext)){
		}else{
			respMsg="图片格式不正确";
		}
		return respMsg;
	}
}
