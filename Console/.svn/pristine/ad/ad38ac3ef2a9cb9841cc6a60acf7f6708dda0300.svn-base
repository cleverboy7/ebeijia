package com.ebeijia.service.wechat.kf;

import java.io.File;
import java.util.Map;

import net.sf.json.JSONObject;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import com.ebeijia.dao.wechat.WechatKfDao;
import com.ebeijia.entity.vo.wechat.AccessToken;
import com.ebeijia.entity.vo.wechat.kf.Kf;
import com.ebeijia.entity.wechat.TblWechatKf;
import com.ebeijia.entity.wechat.TblWechatKfId;
import com.ebeijia.entity.wechat.TblWechatMchtInf;
import com.ebeijia.service.wechat.core.WechatMchtInfService;
import com.ebeijia.service.wechat.core.WechatTokenService;
import com.ebeijia.service.wechat.inter.KfManager;
import com.ebeijia.util.SystemProperties;
import com.ebeijia.util.UpLoad;
import com.ebeijia.util.wechat.WechatUtil;

@Service
public final class WechatKfServiceImpl implements WechatKfService {

	@Autowired
	private WechatKfDao wechatKfDao;
	@Autowired
	private WechatMchtInfService wechatMchtInfService;
	@Autowired
	private WechatTokenService wechatTokenService;
	@Autowired
	private KfManager kfManager;
	
	//添加客服
	@Transactional
	@CacheEvict(value="wechatKfCache",allEntries=true)
	public String save(String mchtId,Kf kf){
		//异常时返回内容
		String result = null;
		//查询该商户的appId appSecret
		TblWechatMchtInf tblWechatMchtInf =wechatMchtInfService.getById(mchtId);
        // 调用接口获取access_token  
        AccessToken at = wechatTokenService.getAccessToken(tblWechatMchtInf.getAppid(), tblWechatMchtInf.getAppsecret());  
        if (null != at) {  
        	JSONObject jsonObject =kfManager.createKf(kf, at.getToken());
        	 if (null != jsonObject) {
                 if (WechatUtil.getWechatCallBackStatus(jsonObject.toString()) != 0) {  
                     result = jsonObject.getString("errcode");  
                 }else{
                	TblWechatKfId id =new TblWechatKfId();
                	id.setKfId(kf.getKf_account());
                	id.setMchtId(mchtId);
                	TblWechatKf data = new TblWechatKf();
                	data.setId(id);
                	data.setKfNick(kf.getNickname());
                	data.setKfPwd(kf.getPassword());
                	wechatKfDao.save(data);
                 }
			} else {
				result = "8888888";
			}
        }else{
        	result="9999999";
        }
        return result;
	}

	@Transactional
	@CacheEvict(value="wechatKfCache",allEntries=true)
	public String upd(String mchtId,Kf kf){
		//异常时返回内容
		String result = null;
		//查询该商户的appId appSecret
		TblWechatMchtInf tblWechatMchtInf =wechatMchtInfService.getById(mchtId);
        // 调用接口获取access_token  
        AccessToken at = wechatTokenService.getAccessToken(tblWechatMchtInf.getAppid(), tblWechatMchtInf.getAppsecret());  
        if (null != at) {  
        	JSONObject jsonObject =kfManager.updKf(kf, at.getToken());
        	 if (null != jsonObject) {
                 if (WechatUtil.getWechatCallBackStatus(jsonObject.toString()) != 0) {  
                     result = jsonObject.getString("errcode");  
                 }else{
                	TblWechatKfId id =new TblWechatKfId();
                	id.setKfId(kf.getKf_account());
                	id.setMchtId(mchtId);
                	TblWechatKf data = new TblWechatKf();
                	data.setId(id);
                	data.setKfNick(kf.getNickname());
                	data.setKfPwd(kf.getPassword());
                	wechatKfDao.update(data);
                 }
        	 }
        }else{
        	result="9999999";
        }
        return result;
	}
	
	@Transactional
	@CacheEvict(value="wechatKfCache",allEntries=true)
	public String del(String mchtId,String account){
		//异常时返回内容
		String result = null;
		//查询该商户的appId appSecret
		TblWechatMchtInf tblWechatMchtInf =wechatMchtInfService.getById(mchtId);
        // 调用接口获取access_token  
        AccessToken at = wechatTokenService.getAccessToken(tblWechatMchtInf.getAppid(), tblWechatMchtInf.getAppsecret());  
        if (null != at) {  
        	JSONObject jsonObject =kfManager.delKf(account, at.getToken());
        	 if (null != jsonObject) {
                 if (WechatUtil.getWechatCallBackStatus(jsonObject.toString()) != 0) {  
                     result = jsonObject.getString("errcode");  
                 }else{
                	TblWechatKfId id =new TblWechatKfId();
                	id.setKfId(account);
                	id.setMchtId(mchtId);
                	wechatKfDao.deleteById(id);
                 }
        	 }
        }else{
        	result="9999999";
        }
        return result;
	}

	@Transactional
	@CacheEvict(value="wechatKfCache",allEntries=true)
	public String upHead(String mchtId,String type,MultipartFile f,String ext){
		UpLoad upload = new UpLoad();
		//上传文件本地到服务器
		File file = upload.getFile(f,SystemProperties.getProperties("image.path1"),type,ext);
 		TblWechatMchtInf data =wechatMchtInfService.getById(mchtId);
		AccessToken at = wechatTokenService.getAccessToken(data.getAppid(), data.getAppsecret());
		JSONObject jsonObject = null;
		//异常时返回内容
		String result = null;
		if (null != at) {
			jsonObject = kfManager.upHeadKf(at.getToken(),type,file,ext);
			if (null != jsonObject) {
				if (jsonObject.toString().indexOf("errcode") !=-1) {
					result = jsonObject.getString("errcode");
				} else {
					// 保存客服头像
				}
			}else{
				result="8888888";
			}
		}else{
        	result="9999999";
        }
		return result;
	}
	
	@Transactional
	@Cacheable(value="wechatKfCache",key = "#root.method.name+#id")
	public TblWechatKf getById(TblWechatKfId id){
		return wechatKfDao.getById(id);
	}
	
	@Transactional
	@Cacheable(value="wechatKfCache")
	public Map<String,Object> findBySql(String mchtId,String pageData) {
		StringBuilder query =new StringBuilder();
		query.append("from TblWechatKf ");
		query.append(" where 1=1");
		if(mchtId !=null && !"".equals(mchtId)){
			query.append(" AND id.mchtId ='").append(mchtId).append("' ");
		}
		Map<String,Object> m =wechatKfDao.findByPage(query.toString(), pageData);
		return m;
	}
	
	@Transactional
	@Cacheable(value="wechatKfCache",key = "#root.method.name+#mchtId")
	public int findCount(String mchtId){
		StringBuilder sb = new StringBuilder();
		sb.append("From TblWechatKf where id.mchtId ='").append(mchtId).append("'");
		int total =wechatKfDao.getTotalRows(sb.toString());
		return total;
	}
}